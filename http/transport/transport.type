// Transport is an implementation of RoundTripper that supports HTTP,
// HTTPS, and HTTP proxies (for either HTTP or HTTPS with CONNECT).
// Transport can also cache connections for future re-use.
type Transport struct {
		idleMu     sync.Mutex
		wantIdle   bool // user has requested to close all idle conns
		idleConn   map[connectMethodKey][]*persistConn
		idleConnCh map[connectMethodKey]chan *persistConn

		reqMu       sync.Mutex
		reqCanceler map[*Request]func()

		altMu    sync.RWMutex
		altProto map[string]RoundTripper // nil or map of URI scheme => RoundTripper

		// Proxy specifies a function to return a proxy for a given
		// Request. If the function returns a non-nil error, the
		// request is aborted with the provided error.
		// If Proxy is nil or returns a nil *URL, no proxy is used.
		Proxy func(*Request) (*url.URL, error)

		// Dial specifies the dial function for creating unencrypted
		// TCP connections.
		// If Dial is nil, net.Dial is used.
		Dial func(network, addr string) (net.Conn, error)

		// DialTLS specifies an optional dial function for creating
		// TLS connections for non-proxied HTTPS requests.
		//
		// If DialTLS is nil, Dial and TLSClientConfig are used.
		//
		// If DialTLS is set, the Dial hook is not used for HTTPS
		// requests and the TLSClientConfig and TLSHandshakeTimeout
		// are ignored. The returned net.Conn is assumed to already be
		// past the TLS handshake.
		DialTLS func(network, addr string) (net.Conn, error)

		// TLSClientConfig specifies the TLS configuration to use with
		// tls.Client. If nil, the default configuration is used.
		TLSClientConfig *tls.Config

		// TLSHandshakeTimeout specifies the maximum amount of time waiting to
		// wait for a TLS handshake. Zero means no timeout.
		TLSHandshakeTimeout time.Duration

		// DisableKeepAlives, if true, prevents re-use of TCP connections
		// between different HTTP requests.
		DisableKeepAlives bool

		// DisableCompression, if true, prevents the Transport from
		// requesting compression with an "Accept-Encoding: gzip"
		// request header when the Request contains no existing
		// Accept-Encoding value. If the Transport requests gzip on
		// its own and gets a gzipped response, it's transparently
		// decoded in the Response.Body. However, if the user
		// explicitly requested gzip it is not automatically
		// uncompressed.
		DisableCompression bool

		// MaxIdleConnsPerHost, if non-zero, controls the maximum idle
		// (keep-alive) to keep per-host.  If zero,
		// DefaultMaxIdleConnsPerHost is used.
		MaxIdleConnsPerHost int

		// ResponseHeaderTimeout, if non-zero, specifies the amount of
		// time to wait for a server's response headers after fully
		// writing the request (including its body, if any). This
		// time does not include the time to read the response body.
		ResponseHeaderTimeout time.Duration

		// TODO: tunable on global max cached connections
		// TODO: tunable on timeout on cached connections
}
